[
  {
    "objectID": "reference/aggregate_cat.html",
    "href": "reference/aggregate_cat.html",
    "title": "aggregate_cat",
    "section": "",
    "text": "aggregate_cat\naggregate_cat(d, column, *, keep_leaves=False, taxid_col='taxid')",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_cat"
    ]
  },
  {
    "objectID": "reference/aggregate_count.html",
    "href": "reference/aggregate_count.html",
    "title": "aggregate_count",
    "section": "",
    "text": "aggregate_count(d, *, result_col='n', taxid_col='taxid')\nAggregates nodes count in a DataFrame with taxonomy ids along the branches of the lifemap tree.\n\n\nd : pd.DataFrame | pl.DataFrame DataFrame to aggregate data from. result_col : str, optional Name of the column created to store the counts, by default “n” taxid_col : str, optional Name of the d column containing taxonomy ids, by default “taxid”\n\n\n\npl.DataFrame Aggregated DataFrame.\n\n\n\naggregate_num : aggregation of a numeric variable. aggregate_cat : aggregation of the values counts of a categorical variable.",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_count"
    ]
  },
  {
    "objectID": "reference/aggregate_count.html#parameters",
    "href": "reference/aggregate_count.html#parameters",
    "title": "aggregate_count",
    "section": "",
    "text": "d : pd.DataFrame | pl.DataFrame DataFrame to aggregate data from. result_col : str, optional Name of the column created to store the counts, by default “n” taxid_col : str, optional Name of the d column containing taxonomy ids, by default “taxid”",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_count"
    ]
  },
  {
    "objectID": "reference/aggregate_count.html#returns",
    "href": "reference/aggregate_count.html#returns",
    "title": "aggregate_count",
    "section": "",
    "text": "pl.DataFrame Aggregated DataFrame.",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_count"
    ]
  },
  {
    "objectID": "reference/aggregate_count.html#see-also",
    "href": "reference/aggregate_count.html#see-also",
    "title": "aggregate_count",
    "section": "",
    "text": "aggregate_num : aggregation of a numeric variable. aggregate_cat : aggregation of the values counts of a categorical variable.",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_count"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Reference",
    "section": "",
    "text": "Main Lifemap class.\n\n\n\nLifemap\n\n\n\n\n\n\n\nFunctions aggregate data.\n\n\n\naggregate_count\nAggregates nodes count in a DataFrame with taxonomy ids along the branches\n\n\naggregate_num\nAggregates a numerical variable in a DataFrame with taxonomy ids along the branches\n\n\naggregate_cat",
    "crumbs": [
      "Reference"
    ]
  },
  {
    "objectID": "reference/index.html#lifemap-class",
    "href": "reference/index.html#lifemap-class",
    "title": "Reference",
    "section": "",
    "text": "Main Lifemap class.\n\n\n\nLifemap",
    "crumbs": [
      "Reference"
    ]
  },
  {
    "objectID": "reference/index.html#aggregation-functions",
    "href": "reference/index.html#aggregation-functions",
    "title": "Reference",
    "section": "",
    "text": "Functions aggregate data.\n\n\n\naggregate_count\nAggregates nodes count in a DataFrame with taxonomy ids along the branches\n\n\naggregate_num\nAggregates a numerical variable in a DataFrame with taxonomy ids along the branches\n\n\naggregate_cat",
    "crumbs": [
      "Reference"
    ]
  },
  {
    "objectID": "usage.html",
    "href": "usage.html",
    "title": "Usage",
    "section": "",
    "text": "Usage instructions."
  },
  {
    "objectID": "development.html",
    "href": "development.html",
    "title": "Development",
    "section": "",
    "text": "To install pylifemap from git:\npip install git+https://github.com/juba/pylifemap.git"
  },
  {
    "objectID": "development.html#install-from-git",
    "href": "development.html#install-from-git",
    "title": "Development",
    "section": "",
    "text": "To install pylifemap from git:\npip install git+https://github.com/juba/pylifemap.git"
  },
  {
    "objectID": "development.html#install-fom-source",
    "href": "development.html#install-fom-source",
    "title": "Development",
    "section": "Install fom source",
    "text": "Install fom source\nIf you want to build pylifemap from source, you’ll have to follow these steps:\n\nInstall node.js\nInstall hatch dependency management system\nClone the pylifemap repository\nInstall Python dependencies with : hatch shell\nInstall JavaScript dependencies with : npm install --workspaces --include-root-workspace"
  },
  {
    "objectID": "development.html#widget-javascript-modification-and-bundling",
    "href": "development.html#widget-javascript-modification-and-bundling",
    "title": "Development",
    "section": "Widget JavaScript modification and bundling",
    "text": "Widget JavaScript modification and bundling\nEach time the widget JavaScript or CSS code is modified in the src/js/ or packages/lifemapjs directories, it must be bundled with one of the following commands in pylifemap:\n# Bundle only once\nnpm run bundle\n# Or, to bundle and watch for code change\nnpm run dev\nThe result is put into src/pylifemap/static."
  },
  {
    "objectID": "development.html#maintenance-notes",
    "href": "development.html#maintenance-notes",
    "title": "Development",
    "section": "Maintenance notes",
    "text": "Maintenance notes\n\nReleases\n\nChange version in NEWS.md and src/pylifemap/__about__.py\nRelease the Python package with hatch build and hatch publish in pylifemap\nTag the version in git\nCreate a release on Github\nBump to dev version in pyproject.toml and NEWS.md"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pylifemap",
    "section": "",
    "text": "pylifemap is a jupyter widget allowing to visualize taxonomy data on Lifemap."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "pylifemap",
    "section": "",
    "text": "pylifemap is a jupyter widget allowing to visualize taxonomy data on Lifemap."
  },
  {
    "objectID": "index.html#installation-and-usage",
    "href": "index.html#installation-and-usage",
    "title": "pylifemap",
    "section": "Installation and usage",
    "text": "Installation and usage\nFor the moment the package can only be installed from Github:\npip install git+https://github.com/juba/pylifemap.git\nUsage gives more detailed usage instructions."
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "pylifemap",
    "section": "Credits",
    "text": "Credits\n\nThe iucn data files in the data/ directory have been generated from The IUCN Red List of Threatened Species dataset (DOI 10.15468/0qnb58).\nVisualizations are powered by Open Layers and deck.gl.\nThe widget is developed thanks to the anywidget framework.\nThis documentation website is generated by Quarto and quartodoc."
  },
  {
    "objectID": "reference/aggregate_num.html",
    "href": "reference/aggregate_num.html",
    "title": "aggregate_num",
    "section": "",
    "text": "aggregate_num(d, column, *, fn='sum', taxid_col='taxid')\nAggregates a numerical variable in a DataFrame with taxonomy ids along the branches of the lifemap tree.\n\n\nd : pd.DataFrame | pl.DataFrame DataFrame to aggregate data from. column : str Name of the d column to aggregate. fn : {“sum”, “mean”, “min”, “max”, “median”} Function used to aggregate the values, by default “sum”. taxid_col : str, optional Name of the d column containing taxonomy ids, by default “taxid”\n\n\n\npl.DataFrame Aggregated DataFrame.\n\n\n\nValueError If column is equal to “taxid”. ValueError If fn is not on the allowed values.\n\n\n\naggregate_count : aggregation of the number of observations. aggregate_cat : aggregation of the values counts of a categorical variable.",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_num"
    ]
  },
  {
    "objectID": "reference/aggregate_num.html#parameters",
    "href": "reference/aggregate_num.html#parameters",
    "title": "aggregate_num",
    "section": "",
    "text": "d : pd.DataFrame | pl.DataFrame DataFrame to aggregate data from. column : str Name of the d column to aggregate. fn : {“sum”, “mean”, “min”, “max”, “median”} Function used to aggregate the values, by default “sum”. taxid_col : str, optional Name of the d column containing taxonomy ids, by default “taxid”",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_num"
    ]
  },
  {
    "objectID": "reference/aggregate_num.html#returns",
    "href": "reference/aggregate_num.html#returns",
    "title": "aggregate_num",
    "section": "",
    "text": "pl.DataFrame Aggregated DataFrame.",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_num"
    ]
  },
  {
    "objectID": "reference/aggregate_num.html#raises",
    "href": "reference/aggregate_num.html#raises",
    "title": "aggregate_num",
    "section": "",
    "text": "ValueError If column is equal to “taxid”. ValueError If fn is not on the allowed values.",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_num"
    ]
  },
  {
    "objectID": "reference/aggregate_num.html#see-also",
    "href": "reference/aggregate_num.html#see-also",
    "title": "aggregate_num",
    "section": "",
    "text": "aggregate_count : aggregation of the number of observations. aggregate_cat : aggregation of the values counts of a categorical variable.",
    "crumbs": [
      "Reference",
      "Aggregation functions",
      "aggregate_num"
    ]
  },
  {
    "objectID": "reference/Lifemap.html",
    "href": "reference/Lifemap.html",
    "title": "Lifemap",
    "section": "",
    "text": "Lifemap\nLifemap(self, data, *, locate=True, taxid_col='taxid', x_col='pylifemap_x', y_col='pylifemap_y', zoom=5, legend_width=None, width=DEFAULT_WIDTH, height=DEFAULT_HEIGHT)",
    "crumbs": [
      "Reference",
      "Lifemap class",
      "Lifemap"
    ]
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Development version, work in progress"
  },
  {
    "objectID": "changelog.html#pylifemap-0.0.1-dev",
    "href": "changelog.html#pylifemap-0.0.1-dev",
    "title": "Changelog",
    "section": "",
    "text": "Development version, work in progress"
  }
]