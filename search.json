[
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting started",
    "section": "",
    "text": "To create a Lifemap data visualization, you will have to follow these steps:"
  },
  {
    "objectID": "getting_started.html#prepare-your-data",
    "href": "getting_started.html#prepare-your-data",
    "title": "Getting started",
    "section": "Prepare your data",
    "text": "Prepare your data\nThe data you want to visualize on the Lifemap tree of life must be in a pandas or polars DataFrame. They must contain observations (species) as rows, and variables as columns, and one column must contain the NCBI taxonomy identifier of the species.\npylifemap includes an example dataset generated from The IUCN Red List of Threatened Species. It is a CSV file with the Red List category (in 2022) of more than 84000 species.\nWe can import it as a polars or pandas DataFrame with the following code:\n\nPolarsPandas\n\n\n\nimport polars as pl\n\niucn = pl.read_csv(\n    \"https://raw.githubusercontent.com/Lifemap-ToL/pylifemap/main/data/iucn.csv\"\n)\n\n\n\n\nimport pandas as pd\n\niucn = pd.read_csv(\n    \"https://raw.githubusercontent.com/Lifemap-ToL/pylifemap/main/data/iucn.csv\"\n)\n\n\n\n\nThe resulting table only has two columns: taxid, which contains the species identifiers, and status, with the Red List category of each species.\n\niucn\n\n\nshape: (84_981, 2)\n\n\n\ntaxid\nstatus\n\n\ni64\nstr\n\n\n\n\n651506\n\"Data Deficient\"\n\n\n2803960\n\"Critically Endangered\"\n\n\n143610\n\"Critically Endangered\"\n\n\n2760993\n\"Least Concern\"\n\n\n72259\n\"Least Concern\"\n\n\n…\n…\n\n\n337230\n\"Least Concern\"\n\n\n442623\n\"Vulnerable\"\n\n\n2303643\n\"Critically Endangered\"\n\n\n442625\n\"Critically Endangered\"\n\n\n442626\n\"Least Concern\""
  },
  {
    "objectID": "getting_started.html#initialize-a-lifemap-object",
    "href": "getting_started.html#initialize-a-lifemap-object",
    "title": "Getting started",
    "section": "Initialize a Lifemap object",
    "text": "Initialize a Lifemap object\nThe next step is to create a new Lifemap object. To do this we have to pass it our DataFrame, as well as the name of the column with our taxonomy identifiers1:\n\nfrom pylifemap import Lifemap\n\nLifemap(iucn, taxid_col=\"taxid\")\n\nWarning: 777 taxids have not been found in Lifemap database\nWarning: 152 duplicated taxids have been found in the data\n\n\n&lt;LifemapWidget&gt;\n\n\nWe could have passed other arguments such as the width and height of our visualization, either as a number of pixels or as a CSS units.\nFor example, the following intialization would make the visualization take the full available width, and an height of 800 pixels.\n\nLifemap(iucn, taxid_col=\"taxid\", width=\"100%\", height=800)"
  },
  {
    "objectID": "getting_started.html#add-visualization-layers",
    "href": "getting_started.html#add-visualization-layers",
    "title": "Getting started",
    "section": "Add visualization layers",
    "text": "Add visualization layers\nAfter initializing our Lifemap object, we have to add visualization layers to create graphical representations. There are several different layers available:\n\n\n\nLayer\nDescription\n\n\n\n\nlayer_points\nDisplays each observation with a point. Radius and color can be dependent of an attribute in the DataFrame.\n\n\nlayer_lines\nUsing aggregated data, highlights branches of the tree with lines of varying width and color.\n\n\nlayer_donuts\nDisplays aggregated categorical data as donut charts.\n\n\nlayer_heatmap\nDisplays a heatmap of the observations distribution in the tree.\n\n\nlayer_screengrid\nDisplays the observations distribution with a colored grid with fixed-size cells..\n\n\n\nTo add a layer, we just have to call the corresponding layer_ method of our Lifemap object. For example, to add a points layer:\n\nLifemap(iucn, taxid_col=\"taxid\").layer_points()\n\nWe can add several layers by calling several methods. For example we could display a heatmap layer, and a points layer above it:\n\nLifemap(iucn, taxid_col=\"taxid\").layer_heatmap().layer_points()"
  },
  {
    "objectID": "getting_started.html#show-or-save-the-visualization",
    "href": "getting_started.html#show-or-save-the-visualization",
    "title": "Getting started",
    "section": "Show or save the visualization",
    "text": "Show or save the visualization\nJust adding layers is not sufficient to see our visualization. For it to appear, we have to call the show() method:\n\nLifemap(iucn, taxid_col=\"taxid\").layer_points().show()\n\nWarning: 777 taxids have not been found in Lifemap database\nWarning: 152 duplicated taxids have been found in the data\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen in a notebook environment, calling show() will display the visualisation as a widget. When called from a Python script or a textual Python REPL, the visualization will be saved to a temporary file and, if possible, displayed in the user’s browser. When called from a Python script running inside our Docker container, it will be saved to a file in the working directory.\n\n\nWe can also save it to an HTML file which can be opened later in a browser by using the save() method:\n\nLifemap(iucn, taxid_col=\"taxid\").layer_points().save(\"lifemap.html\")"
  },
  {
    "objectID": "getting_started.html#customize-the-layers",
    "href": "getting_started.html#customize-the-layers",
    "title": "Getting started",
    "section": "Customize the layers",
    "text": "Customize the layers\nEach layer accepts a certain number of arguments to customize its appearance. For example we can change the radius and opacity of our points and make their color depend on their status value:\n\n(\n    Lifemap(iucn, taxid_col=\"taxid\")\n    .layer_points(fill_col=\"status\", radius=3, opacity=0.5)\n    .show()\n)\n\nWarning: 777 taxids have not been found in Lifemap database\nWarning: 152 duplicated taxids have been found in the data"
  },
  {
    "objectID": "getting_started.html#aggregate-data",
    "href": "getting_started.html#aggregate-data",
    "title": "Getting started",
    "section": "Aggregate data",
    "text": "Aggregate data\npylifemap provides several aggregation functions that allow to aggregate data along the branches of the tree:\n\n\n\nFunction\nDescription\n\n\n\n\naggregate_count\nAggregates the number of children of each tree node.\n\n\naggregate_num\nAggregates a numerical variable along the tree branches with a given function (sum , mean, max…).\n\n\naggregate_freq\nAggregates the frequencies of the levels of a categorical variable.\n\n\n\nFor example, we could filter out in our data set the species which have an “extinct” status:\n\nPolarsPandas\n\n\n\niucn_extinct = iucn.filter(pl.col(\"status\") == \"Extinct\")\n\n\n\n\niucn_extinct = iucn[iucn[\"status\"] == \"Extinct\"]\n\n\n\n\nWe can then aggregate their count along the branches with aggregate_count:\n\nfrom pylifemap import aggregate_count\niucn_extinct_agg = aggregate_count(iucn_extinct)\niucn_extinct_agg\n\n\nshape: (774, 2)\n\n\n\ntaxid\nn\n\n\ni32\nu32\n\n\n\n\nnull\n2\n\n\n0\n196\n\n\n2759\n196\n\n\n3193\n21\n\n\n3268\n1\n\n\n…\n…\n\n\n3076244\n1\n\n\n3078114\n76\n\n\n3136023\n1\n\n\n3410119\n1\n\n\n3410121\n1\n\n\n\n\n\n\nFinally, we can represent this new dataset with a lines layer.\n\n(\n    Lifemap(iucn_extinct_agg)\n    .layer_lines(color_col=\"n\", width_col=\"n\", label=\"Extinct species\")\n    .show()\n)\n\nWarning: 3 taxids have not been found in Lifemap database: [None, 1914395, 3041918]"
  },
  {
    "objectID": "getting_started.html#footnotes",
    "href": "getting_started.html#footnotes",
    "title": "Getting started",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nif your column is named “taxid” you can omit the taxid_col argument as it is its default value.↩︎"
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Development version, work in progress"
  },
  {
    "objectID": "changelog.html#pylifemap-0.0.1-dev",
    "href": "changelog.html#pylifemap-0.0.1-dev",
    "title": "Changelog",
    "section": "",
    "text": "Development version, work in progress"
  },
  {
    "objectID": "reference/Lifemap.layer_heatmap.html",
    "href": "reference/Lifemap.layer_heatmap.html",
    "title": "Lifemap.layer_heatmap",
    "section": "",
    "text": "Lifemap.layer_heatmap(\n    radius=30,\n    intensity=5,\n    threshold=0.05,\n    opacity=0.5,\n    color_range=None,\n)\nAdd a heatmap layer.\nThis layer is used to display observations distribution.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nradius\nfloat\nHeatmap radius, by default 30\n30\n\n\nintensity\nfloat\nHeatmap intensity, by default 5\n5\n\n\nthreshold\nfloat\nHeatmap threshold, by default 0.05\n0.05\n\n\nopacity\nfloat\nHeatmap opacity as a floating number between 0 and 1, by default 0.5\n0.5\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object.\n\n\n\n\n\n\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n... })\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_heatmap()\n...     .show()\n... )"
  },
  {
    "objectID": "reference/Lifemap.layer_heatmap.html#parameters",
    "href": "reference/Lifemap.layer_heatmap.html#parameters",
    "title": "Lifemap.layer_heatmap",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nradius\nfloat\nHeatmap radius, by default 30\n30\n\n\nintensity\nfloat\nHeatmap intensity, by default 5\n5\n\n\nthreshold\nfloat\nHeatmap threshold, by default 0.05\n0.05\n\n\nopacity\nfloat\nHeatmap opacity as a floating number between 0 and 1, by default 0.5\n0.5"
  },
  {
    "objectID": "reference/Lifemap.layer_heatmap.html#returns",
    "href": "reference/Lifemap.layer_heatmap.html#returns",
    "title": "Lifemap.layer_heatmap",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object."
  },
  {
    "objectID": "reference/Lifemap.layer_heatmap.html#examples",
    "href": "reference/Lifemap.layer_heatmap.html#examples",
    "title": "Lifemap.layer_heatmap",
    "section": "",
    "text": "&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n... })\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_heatmap()\n...     .show()\n... )"
  },
  {
    "objectID": "reference/Lifemap.layer_donuts.html",
    "href": "reference/Lifemap.layer_donuts.html",
    "title": "Lifemap.layer_donuts",
    "section": "",
    "text": "Lifemap.layer_donuts(\n    counts_col,\n    *,\n    radius=None,\n    leaves='hide',\n    scheme=None,\n    opacity=1,\n    popup=True,\n    label=None,\n)\nAdd a donuts layer.\nThis layer displays the distribution of a categorical variable values among each nodes children. Optionally it can also represent leaves values as a point layer.\nIt should be applied to data computed with aggregate_freq.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncounts_col\nstr\nDataFrame column containing the counts.\nrequired\n\n\nradius\nfloat | None\nDonut charts radius, by default None\nNone\n\n\nleaves\nLiteral[\"show\", \"hide\"]\nIf \"show\", add a points layer with individual leaves values, by default “hide”\n'hide'\n\n\nscheme\nstr | None\nColor scheme for donut charts ans points. It is the name of a categorical Observable Plot color scale, by default None\nNone\n\n\nopacity\nfloat | None\nDonut charts and points opacity, by default 1\n1\n\n\npopup\nbool | None\nIf True, display informations in a popup when a point is clicked, by default False, by default True\nTrue\n\n\nlabel\nstr | None\nLegend title for this layer. If None, the value of counts_col is used.\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf leaves is not one of the allowed values.\n\n\n\n\n\n\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap, aggregate_freq\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n...     \"category\": [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"a\", \"b\", \"b\", \"a\", \"b\"]\n... })\n&gt;&gt;&gt; d = aggregate_freq(d, column=\"category\")\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_donuts(counts_col=\"category\", leaves=\"hide\")\n...     .show()\n... )\n\n\n\n : aggregation of the values counts of a categorical variable."
  },
  {
    "objectID": "reference/Lifemap.layer_donuts.html#parameters",
    "href": "reference/Lifemap.layer_donuts.html#parameters",
    "title": "Lifemap.layer_donuts",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncounts_col\nstr\nDataFrame column containing the counts.\nrequired\n\n\nradius\nfloat | None\nDonut charts radius, by default None\nNone\n\n\nleaves\nLiteral[\"show\", \"hide\"]\nIf \"show\", add a points layer with individual leaves values, by default “hide”\n'hide'\n\n\nscheme\nstr | None\nColor scheme for donut charts ans points. It is the name of a categorical Observable Plot color scale, by default None\nNone\n\n\nopacity\nfloat | None\nDonut charts and points opacity, by default 1\n1\n\n\npopup\nbool | None\nIf True, display informations in a popup when a point is clicked, by default False, by default True\nTrue\n\n\nlabel\nstr | None\nLegend title for this layer. If None, the value of counts_col is used.\nNone"
  },
  {
    "objectID": "reference/Lifemap.layer_donuts.html#returns",
    "href": "reference/Lifemap.layer_donuts.html#returns",
    "title": "Lifemap.layer_donuts",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object."
  },
  {
    "objectID": "reference/Lifemap.layer_donuts.html#raises",
    "href": "reference/Lifemap.layer_donuts.html#raises",
    "title": "Lifemap.layer_donuts",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nValueError\nIf leaves is not one of the allowed values."
  },
  {
    "objectID": "reference/Lifemap.layer_donuts.html#examples",
    "href": "reference/Lifemap.layer_donuts.html#examples",
    "title": "Lifemap.layer_donuts",
    "section": "",
    "text": "&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap, aggregate_freq\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n...     \"category\": [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"a\", \"b\", \"b\", \"a\", \"b\"]\n... })\n&gt;&gt;&gt; d = aggregate_freq(d, column=\"category\")\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_donuts(counts_col=\"category\", leaves=\"hide\")\n...     .show()\n... )"
  },
  {
    "objectID": "reference/Lifemap.layer_donuts.html#see-also",
    "href": "reference/Lifemap.layer_donuts.html#see-also",
    "title": "Lifemap.layer_donuts",
    "section": "",
    "text": ": aggregation of the values counts of a categorical variable."
  },
  {
    "objectID": "reference/aggregate_count.html",
    "href": "reference/aggregate_count.html",
    "title": "aggregate_count",
    "section": "",
    "text": "aggregate_count(d, *, result_col='n', taxid_col='taxid')\nNodes count aggregation along branches.\nAggregates nodes count in a DataFrame with taxonomy ids along the branches of the lifemap tree.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nd\npd.DataFrame | pl.DataFrame\nDataFrame to aggregate data from.\nrequired\n\n\nresult_col\nstr\nName of the column created to store the counts, by default “n”.\n'n'\n\n\ntaxid_col\nstr\nName of the d column containing taxonomy ids, by default “taxid”.\n'taxid'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nAggregated DataFrame.\n\n\n\n\n\n\naggregate_num : aggregation of a numeric variable.\naggregate_freq : aggregation of the values counts of a categorical variable.\n\n\n\n&gt;&gt;&gt; from pylifemap import aggregate_count\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; d = pl.DataFrame({\"taxid\": [33154, 33090, 2]})\n&gt;&gt;&gt; aggregate_count(d)\nshape: (5, 2)\n┌───────┬─────┐\n│ taxid ┆ n   │\n│ ---   ┆ --- │\n│ i32   ┆ u32 │\n╞═══════╪═════╡\n│ 0     ┆ 3   │\n│ 2     ┆ 1   │\n│ 2759  ┆ 2   │\n│ 33090 ┆ 1   │\n│ 33154 ┆ 1   │\n└───────┴─────┘"
  },
  {
    "objectID": "reference/aggregate_count.html#parameters",
    "href": "reference/aggregate_count.html#parameters",
    "title": "aggregate_count",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nd\npd.DataFrame | pl.DataFrame\nDataFrame to aggregate data from.\nrequired\n\n\nresult_col\nstr\nName of the column created to store the counts, by default “n”.\n'n'\n\n\ntaxid_col\nstr\nName of the d column containing taxonomy ids, by default “taxid”.\n'taxid'"
  },
  {
    "objectID": "reference/aggregate_count.html#returns",
    "href": "reference/aggregate_count.html#returns",
    "title": "aggregate_count",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\npl.DataFrame\nAggregated DataFrame."
  },
  {
    "objectID": "reference/aggregate_count.html#see-also",
    "href": "reference/aggregate_count.html#see-also",
    "title": "aggregate_count",
    "section": "",
    "text": "aggregate_num : aggregation of a numeric variable.\naggregate_freq : aggregation of the values counts of a categorical variable."
  },
  {
    "objectID": "reference/aggregate_count.html#examples",
    "href": "reference/aggregate_count.html#examples",
    "title": "aggregate_count",
    "section": "",
    "text": "&gt;&gt;&gt; from pylifemap import aggregate_count\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; d = pl.DataFrame({\"taxid\": [33154, 33090, 2]})\n&gt;&gt;&gt; aggregate_count(d)\nshape: (5, 2)\n┌───────┬─────┐\n│ taxid ┆ n   │\n│ ---   ┆ --- │\n│ i32   ┆ u32 │\n╞═══════╪═════╡\n│ 0     ┆ 3   │\n│ 2     ┆ 1   │\n│ 2759  ┆ 2   │\n│ 33090 ┆ 1   │\n│ 33154 ┆ 1   │\n└───────┴─────┘"
  },
  {
    "objectID": "reference/Lifemap.html",
    "href": "reference/Lifemap.html",
    "title": "Lifemap",
    "section": "",
    "text": "Lifemap(\n    self,\n    data,\n    *,\n    taxid_col='taxid',\n    width=DEFAULT_WIDTH,\n    height=DEFAULT_HEIGHT,\n    zoom=5,\n    legend_width=None,\n)\nBuild visualization.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npl.DataFrame | pd.DataFrame\nVisualization data.\nrequired\n\n\ntaxid_col\nstr\nName of the data column with taxonomy ids, by default \"taxid\"\n'taxid'\n\n\nwidth\nint | str\nLifemap visualization width, in pixels or CSS units, by default DEFAULT_WIDTH\nDEFAULT_WIDTH\n\n\nheight\nint | str\nLifemap visualization height, in pixels or CSS units, by default DEFAULT_HEIGHT\nDEFAULT_HEIGHT\n\n\nzoom\nint\nDefault Lifemap zoom level, by default 5\n5\n\n\nlegend_width\nint | None\nLegend width in pixels, by default None\nNone\n\n\n\n\n\n\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\"taxid\": [9685, 9615, 9994]})\n&gt;&gt;&gt; (\n...     Lifemap(d, width=\"100%\", height=\"100vh\")\n...     .layer_points()\n...     .show()\n&gt;&gt;&gt; )\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nlayer_points\nAdd a points layer.\n\n\nlayer_lines\nAdd a lines layer.\n\n\nlayer_donuts\nAdd a donuts layer.\n\n\nlayer_heatmap\nAdd a heatmap layer.\n\n\nlayer_screengrid\nAdd a screengrid layer.\n\n\nshow\nDisplay the Jupyter widget for this instance.\n\n\nsave\nSave the Jupyter widget for this instance to an HTML file."
  },
  {
    "objectID": "reference/Lifemap.html#parameters",
    "href": "reference/Lifemap.html#parameters",
    "title": "Lifemap",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndata\npl.DataFrame | pd.DataFrame\nVisualization data.\nrequired\n\n\ntaxid_col\nstr\nName of the data column with taxonomy ids, by default \"taxid\"\n'taxid'\n\n\nwidth\nint | str\nLifemap visualization width, in pixels or CSS units, by default DEFAULT_WIDTH\nDEFAULT_WIDTH\n\n\nheight\nint | str\nLifemap visualization height, in pixels or CSS units, by default DEFAULT_HEIGHT\nDEFAULT_HEIGHT\n\n\nzoom\nint\nDefault Lifemap zoom level, by default 5\n5\n\n\nlegend_width\nint | None\nLegend width in pixels, by default None\nNone"
  },
  {
    "objectID": "reference/Lifemap.html#examples",
    "href": "reference/Lifemap.html#examples",
    "title": "Lifemap",
    "section": "",
    "text": "&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\"taxid\": [9685, 9615, 9994]})\n&gt;&gt;&gt; (\n...     Lifemap(d, width=\"100%\", height=\"100vh\")\n...     .layer_points()\n...     .show()\n&gt;&gt;&gt; )"
  },
  {
    "objectID": "reference/Lifemap.html#methods",
    "href": "reference/Lifemap.html#methods",
    "title": "Lifemap",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nlayer_points\nAdd a points layer.\n\n\nlayer_lines\nAdd a lines layer.\n\n\nlayer_donuts\nAdd a donuts layer.\n\n\nlayer_heatmap\nAdd a heatmap layer.\n\n\nlayer_screengrid\nAdd a screengrid layer.\n\n\nshow\nDisplay the Jupyter widget for this instance.\n\n\nsave\nSave the Jupyter widget for this instance to an HTML file."
  },
  {
    "objectID": "reference/Lifemap.layer_screengrid.html",
    "href": "reference/Lifemap.layer_screengrid.html",
    "title": "Lifemap.layer_screengrid",
    "section": "",
    "text": "Lifemap.layer_screengrid(cell_size=30, extruded=False, opacity=0.5)\nAdd a screengrid layer.\nThis layer is used to display observations distribution. It should be noted that the visualization is highly sensitive to the zoom level and the map extent.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncell_size\nint\nScreen grid cell size, in pixels, by default 30\n30\n\n\nextruded\n(bool, optionals)\nIf True, show the grid as extruded, by default False\nFalse\n\n\nopacity\nfloat\nScreengrid opacity as a floating point number between 0 and 1, by default 0.5\n0.5\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object.\n\n\n\n\n\n\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n... })\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_screengrid()\n...     .show()\n... )"
  },
  {
    "objectID": "reference/Lifemap.layer_screengrid.html#parameters",
    "href": "reference/Lifemap.layer_screengrid.html#parameters",
    "title": "Lifemap.layer_screengrid",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncell_size\nint\nScreen grid cell size, in pixels, by default 30\n30\n\n\nextruded\n(bool, optionals)\nIf True, show the grid as extruded, by default False\nFalse\n\n\nopacity\nfloat\nScreengrid opacity as a floating point number between 0 and 1, by default 0.5\n0.5"
  },
  {
    "objectID": "reference/Lifemap.layer_screengrid.html#returns",
    "href": "reference/Lifemap.layer_screengrid.html#returns",
    "title": "Lifemap.layer_screengrid",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object."
  },
  {
    "objectID": "reference/Lifemap.layer_screengrid.html#examples",
    "href": "reference/Lifemap.layer_screengrid.html#examples",
    "title": "Lifemap.layer_screengrid",
    "section": "",
    "text": "&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n... })\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_screengrid()\n...     .show()\n... )"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Reference",
    "section": "",
    "text": "Lifemap\nBuild visualization.\n\n\nLifemap.layer_points\nAdd a points layer.\n\n\nLifemap.layer_lines\nAdd a lines layer.\n\n\nLifemap.layer_donuts\nAdd a donuts layer.\n\n\nLifemap.layer_heatmap\nAdd a heatmap layer.\n\n\nLifemap.layer_screengrid\nAdd a screengrid layer.\n\n\nLifemap.show\nDisplay the Jupyter widget for this instance.\n\n\nLifemap.save\nSave the Jupyter widget for this instance to an HTML file.\n\n\n\n\n\n\nFunctions to aggregate data along the branches of the lifemap tree.\n\n\n\naggregate_count\nNodes count aggregation along branches.\n\n\naggregate_num\nNumerical variable aggregation along branches.\n\n\naggregate_freq\nCategorical variable frequencies aggregation along branches."
  },
  {
    "objectID": "reference/index.html#visualization",
    "href": "reference/index.html#visualization",
    "title": "Reference",
    "section": "",
    "text": "Lifemap\nBuild visualization.\n\n\nLifemap.layer_points\nAdd a points layer.\n\n\nLifemap.layer_lines\nAdd a lines layer.\n\n\nLifemap.layer_donuts\nAdd a donuts layer.\n\n\nLifemap.layer_heatmap\nAdd a heatmap layer.\n\n\nLifemap.layer_screengrid\nAdd a screengrid layer.\n\n\nLifemap.show\nDisplay the Jupyter widget for this instance.\n\n\nLifemap.save\nSave the Jupyter widget for this instance to an HTML file."
  },
  {
    "objectID": "reference/index.html#data-aggregation",
    "href": "reference/index.html#data-aggregation",
    "title": "Reference",
    "section": "",
    "text": "Functions to aggregate data along the branches of the lifemap tree.\n\n\n\naggregate_count\nNodes count aggregation along branches.\n\n\naggregate_num\nNumerical variable aggregation along branches.\n\n\naggregate_freq\nCategorical variable frequencies aggregation along branches."
  },
  {
    "objectID": "layers/layer_points.html",
    "href": "layers/layer_points.html",
    "title": "Points layer",
    "section": "",
    "text": "The points layer displays observations as points on the lifemap tree.\nIt is possible to make the fill color and the radius of the points depending on a data variable.\n\nimport polars as pl\nfrom pylifemap import Lifemap, aggregate_count\n\n# Load iucn dataset\niucn = pl.read_csv(\n    \"https://raw.githubusercontent.com/Lifemap-ToL/pylifemap/main/data/iucn.csv\"\n)\n\n# Aggregate observations count along branches\niucn_agg = aggregate_count(iucn)\n\n(\n    Lifemap(iucn_agg)\n    .layer_points(fill_col=\"n\", radius_col=\"n\", opacity=0.7, popup=True)\n    .show()\n)\n\nWarning: 777 taxids have not been found in Lifemap database\n\n\n\n\n\nFor a detailed list of layer_points arguments you can take a look at its documentation."
  },
  {
    "objectID": "layers/layer_donuts.html",
    "href": "layers/layer_donuts.html",
    "title": "Donuts layer",
    "section": "",
    "text": "The donuts layer displays aggregated levels count of a categorical variable as donut charts, optionally displayng the individual values with points.\n\nimport polars as pl\nfrom pylifemap import Lifemap, aggregate_freq\n\n# Load iucn dataset\niucn = pl.read_csv(\n    \"https://raw.githubusercontent.com/Lifemap-ToL/pylifemap/main/data/iucn.csv\"\n)\n\n# Aggregate observations count along branches\niucn_freq = aggregate_freq(iucn, column=\"status\")\n\n(\n    Lifemap(iucn_freq)\n    .layer_donuts(counts_col=\"status\", opacity=1, leaves=\"show\")\n    .show()\n)\n\nWarning: 785 taxids have not been found in Lifemap database\nWarning: 9974 duplicated taxids have been found in the data\n\n\n\n\n\nThe leaves argument allows to \"show\" or \"hide\" individual leaves values.\nFor a detailed list of layer_donuts arguments you can take a look at its documentation."
  },
  {
    "objectID": "layers/layer_heatmap.html",
    "href": "layers/layer_heatmap.html",
    "title": "Heatmap layer",
    "section": "",
    "text": "The heatmap layer displays observations distribution as a heatmap overlay.\n\nimport polars as pl\nfrom pylifemap import Lifemap\n\n# Load iucn dataset\niucn = pl.read_csv(\n    \"https://raw.githubusercontent.com/Lifemap-ToL/pylifemap/main/data/iucn.csv\"\n)\n\n(\n    Lifemap(iucn)\n    .layer_heatmap(opacity=0.5)\n    .show()\n)\n\nWarning: 777 taxids have not been found in Lifemap database\nWarning: 152 duplicated taxids have been found in the data\n\n\n\n\n\nFor a detailed list of layer_heatmap arguments you can take a look at its documentation."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pylifemap",
    "section": "",
    "text": "pylifemap is a jupyter widget allowing to visualize taxonomy data on Lifemap. It provides several visualisation layers, as well as aggregation functions allowing to aggregate data along the tree branches.\nHere is a simple example:\n\nimport pandas as pd\nfrom pylifemap import Lifemap\n\n# Load iucn dataset\niucn = pd.read_csv(\n    \"https://raw.githubusercontent.com/Lifemap-ToL/pylifemap/main/data/iucn.csv\"\n)\n\nLifemap(iucn).layer_points(radius=5, opacity=0.1).show()\n\nNewer data are available, downloading...\nDone.\nWarning: 777 taxids have not been found in Lifemap database\nWarning: 152 duplicated taxids have been found in the data"
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "pylifemap",
    "section": "",
    "text": "pylifemap is a jupyter widget allowing to visualize taxonomy data on Lifemap. It provides several visualisation layers, as well as aggregation functions allowing to aggregate data along the tree branches.\nHere is a simple example:\n\nimport pandas as pd\nfrom pylifemap import Lifemap\n\n# Load iucn dataset\niucn = pd.read_csv(\n    \"https://raw.githubusercontent.com/Lifemap-ToL/pylifemap/main/data/iucn.csv\"\n)\n\nLifemap(iucn).layer_points(radius=5, opacity=0.1).show()\n\nNewer data are available, downloading...\nDone.\nWarning: 777 taxids have not been found in Lifemap database\nWarning: 152 duplicated taxids have been found in the data"
  },
  {
    "objectID": "index.html#installation-and-usage",
    "href": "index.html#installation-and-usage",
    "title": "pylifemap",
    "section": "Installation and usage",
    "text": "Installation and usage\n\nInstallation describes different ways to install and use the package.\nGetting started gives general usage instructions.\nThe Layers section shows visual interactive examples of the different available layers.\nReference provides detailed documentation of the different methods and functions."
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "pylifemap",
    "section": "Credits",
    "text": "Credits\n\nThe iucn data files in the data/ directory have been generated from The IUCN Red List of Threatened Species dataset (DOI 10.15468/0qnb58).\nVisualizations are powered by Open Layers and deck.gl.\nThe widget is developed thanks to the anywidget framework.\nThis documentation website is generated by Quarto and quartodoc."
  },
  {
    "objectID": "layers/layer_screengrid.html",
    "href": "layers/layer_screengrid.html",
    "title": "Screengrid layer",
    "section": "",
    "text": "The screengrid layer displays observations distribution as a colored grid with fixed-size cells.\n\n\n\n\n\n\nNote\n\n\n\nThis visualization is highly sensitive to the current zoom level and extent. Small modifications of the view can lead to very different visual representations.\n\n\n\nimport polars as pl\nfrom pylifemap import Lifemap\n\n# Load iucn dataset\niucn = pl.read_csv(\n    \"https://raw.githubusercontent.com/Lifemap-ToL/pylifemap/main/data/iucn.csv\"\n)\n\n(\n    Lifemap(iucn)\n    .layer_screengrid(opacity=0.5)\n    .show()\n)\n\nWarning: 777 taxids have not been found in Lifemap database\nWarning: 152 duplicated taxids have been found in the data\n\n\n\n\n\nFor a detailed list of layer_screengrid arguments you can take a look at its documentation."
  },
  {
    "objectID": "layers/layer_lines.html",
    "href": "layers/layer_lines.html",
    "title": "Lines layer",
    "section": "",
    "text": "The lines layer displays aggregated observations (count or numerical variable) by highlighting branches of the tree.\nIt is possible to make the color and the width of the lines depending on a data variable.\n\nimport polars as pl\nfrom pylifemap import Lifemap, aggregate_count\n\n# Load iucn dataset\niucn = pl.read_csv(\n    \"https://raw.githubusercontent.com/Lifemap-ToL/pylifemap/main/data/iucn.csv\"\n)\n\n# Aggregate observations count along branches\niucn_agg = aggregate_count(iucn)\n\n(\n    Lifemap(iucn_agg)\n    .layer_lines(color_col=\"n\", width_col=\"n\", opacity=0.6)\n    .show()\n)\n\nWarning: 777 taxids have not been found in Lifemap database\n\n\n\n\n\nFor a detailed list of layer_lines arguments you can take a look at its documentation."
  },
  {
    "objectID": "reference/Lifemap.layer_points.html",
    "href": "reference/Lifemap.layer_points.html",
    "title": "Lifemap.layer_points",
    "section": "",
    "text": "Lifemap.layer_points(\n    leaves='show',\n    radius=None,\n    radius_col=None,\n    fill_col=None,\n    fill_col_cat=None,\n    scheme=None,\n    opacity=0.8,\n    popup=False,\n    label=None,\n)\nAdd a points layer.\nIt can be used to display leaves values, or aggregated counts or values already computed or generated by aggregate_num or aggregate_count.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nleaves\nLiteral[\"show\", \"only\", \"omit\"]\nIf \"only\", only show tree leaves. If \"omit\", only show nodes that are not leaves. If \"show\", show all nodes, by default “show”\n'show'\n\n\nradius\nfloat | None\nBase points radius, by default None\nNone\n\n\nradius_col\nstr | None\nName of a numeric DataFrame column to compute points radius, by default None\nNone\n\n\nfill_col\nstr | None\nName of a DataFrame column to determine points color, by default None\nNone\n\n\nfill_col_cat\nbool | None\nIf True, force color scheme to be categorical. If False, force it to be continuous. If None, let pylifemap decide, by default None\nNone\n\n\nscheme\nstr | None\nColor scheme for points color. If fill_col is defined, it is the name of an Observable Plot color scale. Otherwise, it is an hexadecimal color value, by default None\nNone\n\n\nopacity\nfloat | None\nPoints opacity as a floating number between 0 and 1, by default 0.8\n0.8\n\n\npopup\nbool | None\nIf True, display informations in a popup when a point is clicked, by default False\nFalse\n\n\nlabel\nstr | None\nLegend title for this layer if fill_col is defined. If None, the value of fill_col is used.\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf leaves is not one of the allowed values.\n\n\n\n\n\n\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n...     \"value\": [ 7.4,  2.5,  8.3,     1.0,     1.4,     5.6,     4.6,     3.4,     2.3,     2.8,    3.1]\n... })\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_points(radius_col=\"value\", fill_col=\"value\", popup=True)\n...     .show()\n... )\n\n\n\naggregate_num : aggregation of a numeric variable.\naggregate_count : aggregation of the number of observations."
  },
  {
    "objectID": "reference/Lifemap.layer_points.html#parameters",
    "href": "reference/Lifemap.layer_points.html#parameters",
    "title": "Lifemap.layer_points",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nleaves\nLiteral[\"show\", \"only\", \"omit\"]\nIf \"only\", only show tree leaves. If \"omit\", only show nodes that are not leaves. If \"show\", show all nodes, by default “show”\n'show'\n\n\nradius\nfloat | None\nBase points radius, by default None\nNone\n\n\nradius_col\nstr | None\nName of a numeric DataFrame column to compute points radius, by default None\nNone\n\n\nfill_col\nstr | None\nName of a DataFrame column to determine points color, by default None\nNone\n\n\nfill_col_cat\nbool | None\nIf True, force color scheme to be categorical. If False, force it to be continuous. If None, let pylifemap decide, by default None\nNone\n\n\nscheme\nstr | None\nColor scheme for points color. If fill_col is defined, it is the name of an Observable Plot color scale. Otherwise, it is an hexadecimal color value, by default None\nNone\n\n\nopacity\nfloat | None\nPoints opacity as a floating number between 0 and 1, by default 0.8\n0.8\n\n\npopup\nbool | None\nIf True, display informations in a popup when a point is clicked, by default False\nFalse\n\n\nlabel\nstr | None\nLegend title for this layer if fill_col is defined. If None, the value of fill_col is used.\nNone"
  },
  {
    "objectID": "reference/Lifemap.layer_points.html#returns",
    "href": "reference/Lifemap.layer_points.html#returns",
    "title": "Lifemap.layer_points",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object."
  },
  {
    "objectID": "reference/Lifemap.layer_points.html#raises",
    "href": "reference/Lifemap.layer_points.html#raises",
    "title": "Lifemap.layer_points",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nValueError\nIf leaves is not one of the allowed values."
  },
  {
    "objectID": "reference/Lifemap.layer_points.html#examples",
    "href": "reference/Lifemap.layer_points.html#examples",
    "title": "Lifemap.layer_points",
    "section": "",
    "text": "&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n...     \"value\": [ 7.4,  2.5,  8.3,     1.0,     1.4,     5.6,     4.6,     3.4,     2.3,     2.8,    3.1]\n... })\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_points(radius_col=\"value\", fill_col=\"value\", popup=True)\n...     .show()\n... )"
  },
  {
    "objectID": "reference/Lifemap.layer_points.html#see-also",
    "href": "reference/Lifemap.layer_points.html#see-also",
    "title": "Lifemap.layer_points",
    "section": "",
    "text": "aggregate_num : aggregation of a numeric variable.\naggregate_count : aggregation of the number of observations."
  },
  {
    "objectID": "reference/Lifemap.save.html",
    "href": "reference/Lifemap.save.html",
    "title": "Lifemap.save",
    "section": "",
    "text": "Lifemap.save(path, title='Lifemap')\nSave the Jupyter widget for this instance to an HTML file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nstr | Path\nPath to the HTML file to save the widget.\nrequired\n\n\ntitle\nstr\nOptional HTML page title, by default “Lifemap”\n'Lifemap'\n\n\n\n\n\n\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\"taxid\": [9685, 9615, 9994]})\n&gt;&gt;&gt; (\n...     Lifemap(d, width=\"100%\", height=\"100vh\")\n...     .layer_points()\n...     .save(\"lifemap.html\", title=\"Example lifemap\")\n... )"
  },
  {
    "objectID": "reference/Lifemap.save.html#parameters",
    "href": "reference/Lifemap.save.html#parameters",
    "title": "Lifemap.save",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npath\nstr | Path\nPath to the HTML file to save the widget.\nrequired\n\n\ntitle\nstr\nOptional HTML page title, by default “Lifemap”\n'Lifemap'"
  },
  {
    "objectID": "reference/Lifemap.save.html#examples",
    "href": "reference/Lifemap.save.html#examples",
    "title": "Lifemap.save",
    "section": "",
    "text": "&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap\n&gt;&gt;&gt; d = pl.DataFrame({\"taxid\": [9685, 9615, 9994]})\n&gt;&gt;&gt; (\n...     Lifemap(d, width=\"100%\", height=\"100vh\")\n...     .layer_points()\n...     .save(\"lifemap.html\", title=\"Example lifemap\")\n... )"
  },
  {
    "objectID": "reference/Lifemap.show.html",
    "href": "reference/Lifemap.show.html",
    "title": "Lifemap.show",
    "section": "",
    "text": "Lifemap.show\nLifemap.show()\nDisplay the Jupyter widget for this instance.\nIn a Jupyter notebook environment, the method uses IPython.display.display to display the visualization directly. Otherwise, it exports the widget to an HTML file and opens it in a browser if possible.\nIn a marimo notebook environment, the widget object is returned in order to be passed to marimo.ui.anywidget()."
  },
  {
    "objectID": "reference/Lifemap.layer_lines.html",
    "href": "reference/Lifemap.layer_lines.html",
    "title": "Lifemap.layer_lines",
    "section": "",
    "text": "Lifemap.layer_lines(\n    width=None,\n    width_col=None,\n    color_col=None,\n    scheme=None,\n    opacity=0.8,\n    popup=False,\n    label=None,\n)\nAdd a lines layer.\nThis layer can be applied to data generated by aggregate_num or aggregate_count.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nwidth\nfloat | None\nBase line width, by default None\nNone\n\n\nwidth_col\nstr | None\nName of numeric DataFrame column to compute line width, by default None\nNone\n\n\ncolor_col\nstr | None\nName of numeric DataFrame column to determine line color, by default None\nNone\n\n\nscheme\nstr | None\nColor scheme for points color. If color_col is defined, it is the name of an Observable Plot color scale. Otherwise, it is an hexadecimal color value, by default None\nNone\n\n\nopacity\nfloat | None\nLine opacity as a floating number between 0 and 1, by default 0.8\n0.8\n\n\npopup\nbool | None\nTODO: doesn’t work for the moment. If True, display informations in a popup when a point is clicked, by default False\nFalse\n\n\nlabel\nstr | None\nLegend title for this layer if color_col is defined. If None, the value of color_col is used.\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object.\n\n\n\n\n\n\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap, aggregate_num\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n...     \"value\": [ 7.4,  2.5,  8.3,     1.0,     1.4,     5.6,     4.6,     3.4,     2.3,     2.8,    3.1]\n... })\n&gt;&gt;&gt; d = aggregate_num(d, column=\"value\", fn=\"mean\")\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_lines(width_col=\"value\", color_col=\"value\")\n...     .show()\n... )\n\n\n\naggregate_num : aggregation of a numeric variable.\naggregate_count : aggregation of the number of observations."
  },
  {
    "objectID": "reference/Lifemap.layer_lines.html#parameters",
    "href": "reference/Lifemap.layer_lines.html#parameters",
    "title": "Lifemap.layer_lines",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nwidth\nfloat | None\nBase line width, by default None\nNone\n\n\nwidth_col\nstr | None\nName of numeric DataFrame column to compute line width, by default None\nNone\n\n\ncolor_col\nstr | None\nName of numeric DataFrame column to determine line color, by default None\nNone\n\n\nscheme\nstr | None\nColor scheme for points color. If color_col is defined, it is the name of an Observable Plot color scale. Otherwise, it is an hexadecimal color value, by default None\nNone\n\n\nopacity\nfloat | None\nLine opacity as a floating number between 0 and 1, by default 0.8\n0.8\n\n\npopup\nbool | None\nTODO: doesn’t work for the moment. If True, display informations in a popup when a point is clicked, by default False\nFalse\n\n\nlabel\nstr | None\nLegend title for this layer if color_col is defined. If None, the value of color_col is used.\nNone"
  },
  {
    "objectID": "reference/Lifemap.layer_lines.html#returns",
    "href": "reference/Lifemap.layer_lines.html#returns",
    "title": "Lifemap.layer_lines",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nLifemap\nA Lifemap visualization object."
  },
  {
    "objectID": "reference/Lifemap.layer_lines.html#examples",
    "href": "reference/Lifemap.layer_lines.html#examples",
    "title": "Lifemap.layer_lines",
    "section": "",
    "text": "&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from pylifemap import Lifemap, aggregate_num\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [9685, 9615, 9994, 2467430, 2514524, 2038938, 1021470, 1415565, 1928562, 1397240, 230741],\n...     \"value\": [ 7.4,  2.5,  8.3,     1.0,     1.4,     5.6,     4.6,     3.4,     2.3,     2.8,    3.1]\n... })\n&gt;&gt;&gt; d = aggregate_num(d, column=\"value\", fn=\"mean\")\n&gt;&gt;&gt; (\n...     Lifemap(d)\n...     .layer_lines(width_col=\"value\", color_col=\"value\")\n...     .show()\n... )"
  },
  {
    "objectID": "reference/Lifemap.layer_lines.html#see-also",
    "href": "reference/Lifemap.layer_lines.html#see-also",
    "title": "Lifemap.layer_lines",
    "section": "",
    "text": "aggregate_num : aggregation of a numeric variable.\naggregate_count : aggregation of the number of observations."
  },
  {
    "objectID": "reference/aggregate_freq.html",
    "href": "reference/aggregate_freq.html",
    "title": "aggregate_freq",
    "section": "",
    "text": "aggregate_freq(d, column, *, taxid_col='taxid')\nCategorical variable frequencies aggregation along branches.\nAggregates a categorical variable in a DataFrame with taxonomy ids as levels frequencies along the branches of the lifemap tree.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nd\npd.DataFrame | pl.DataFrame\nDataFrame to aggregate data from.\nrequired\n\n\ncolumn\nstr\nName of the d column to aggregate.\nrequired\n\n\ntaxid_col\nstr\nName of the d column containing taxonomy ids, by default “taxid”.\n'taxid'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nAggregated DataFrame. The “count” column contains the value counts as a polars struct.\n\n\n\n\n\n\naggregate_num : aggregation of a numeric variable.\naggregate_count : aggregation of the number of observations.\n\n\n\n&gt;&gt;&gt; from pylifemap import aggregate_freq\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [33154, 33090, 2],\n...     \"value\": [\"a\", \"b\", \"a\"]\n... })\n&gt;&gt;&gt; aggregate_freq(d, column=\"value\")\nshape: (7, 3)\n┌───────┬───────┬───────┐\n│ taxid ┆ value ┆ count │\n│ ---   ┆ ---   ┆ ---   │\n│ i32   ┆ str   ┆ u32   │\n╞═══════╪═══════╪═══════╡\n│ 0     ┆ a     ┆ 2     │\n│ 0     ┆ b     ┆ 1     │\n│ 2     ┆ a     ┆ 1     │\n│ 2759  ┆ a     ┆ 1     │\n│ 2759  ┆ b     ┆ 1     │\n│ 33090 ┆ b     ┆ 1     │\n│ 33154 ┆ a     ┆ 1     │\n└───────┴───────┴───────┘"
  },
  {
    "objectID": "reference/aggregate_freq.html#parameters",
    "href": "reference/aggregate_freq.html#parameters",
    "title": "aggregate_freq",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nd\npd.DataFrame | pl.DataFrame\nDataFrame to aggregate data from.\nrequired\n\n\ncolumn\nstr\nName of the d column to aggregate.\nrequired\n\n\ntaxid_col\nstr\nName of the d column containing taxonomy ids, by default “taxid”.\n'taxid'"
  },
  {
    "objectID": "reference/aggregate_freq.html#returns",
    "href": "reference/aggregate_freq.html#returns",
    "title": "aggregate_freq",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\npl.DataFrame\nAggregated DataFrame. The “count” column contains the value counts as a polars struct."
  },
  {
    "objectID": "reference/aggregate_freq.html#see-also",
    "href": "reference/aggregate_freq.html#see-also",
    "title": "aggregate_freq",
    "section": "",
    "text": "aggregate_num : aggregation of a numeric variable.\naggregate_count : aggregation of the number of observations."
  },
  {
    "objectID": "reference/aggregate_freq.html#examples",
    "href": "reference/aggregate_freq.html#examples",
    "title": "aggregate_freq",
    "section": "",
    "text": "&gt;&gt;&gt; from pylifemap import aggregate_freq\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [33154, 33090, 2],\n...     \"value\": [\"a\", \"b\", \"a\"]\n... })\n&gt;&gt;&gt; aggregate_freq(d, column=\"value\")\nshape: (7, 3)\n┌───────┬───────┬───────┐\n│ taxid ┆ value ┆ count │\n│ ---   ┆ ---   ┆ ---   │\n│ i32   ┆ str   ┆ u32   │\n╞═══════╪═══════╪═══════╡\n│ 0     ┆ a     ┆ 2     │\n│ 0     ┆ b     ┆ 1     │\n│ 2     ┆ a     ┆ 1     │\n│ 2759  ┆ a     ┆ 1     │\n│ 2759  ┆ b     ┆ 1     │\n│ 33090 ┆ b     ┆ 1     │\n│ 33154 ┆ a     ┆ 1     │\n└───────┴───────┴───────┘"
  },
  {
    "objectID": "reference/aggregate_num.html",
    "href": "reference/aggregate_num.html",
    "title": "aggregate_num",
    "section": "",
    "text": "aggregate_num(d, column, *, fn='sum', taxid_col='taxid')\nNumerical variable aggregation along branches.\nAggregates a numerical variable in a DataFrame with taxonomy ids along the branches of the lifemap tree.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nd\npd.DataFrame | pl.DataFrame\nDataFrame to aggregate data from.\nrequired\n\n\ncolumn\nstr\nName of the d column to aggregate.\nrequired\n\n\nfn\n(sum, mean, min, max, median)\nFunction used to aggregate the values, by default “sum”.\n\"sum\"\n\n\ntaxid_col\nstr\nName of the d column containing taxonomy ids, by default “taxid”\n'taxid'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nAggregated DataFrame.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf column is equal to “taxid”.\n\n\n\nValueError\nIf fn is not on the allowed values.\n\n\n\n\n\n\naggregate_count : aggregation of the number of observations.\naggregate_freq : aggregation of the values counts of a categorical variable.\n\n\n\n&gt;&gt;&gt; from pylifemap import aggregate_num\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [33154, 33090, 2],\n...     \"value\": [10, 5, 100]\n... })\n&gt;&gt;&gt; aggregate_num(d, column=\"value\", fn=\"sum\")\nshape: (5, 2)\n┌───────┬───────┐\n│ taxid ┆ value │\n│ ---   ┆ ---   │\n│ i32   ┆ i64   │\n╞═══════╪═══════╡\n│ 0     ┆ 115   │\n│ 2     ┆ 100   │\n│ 2759  ┆ 15    │\n│ 33090 ┆ 5     │\n│ 33154 ┆ 10    │\n└───────┴───────┘"
  },
  {
    "objectID": "reference/aggregate_num.html#parameters",
    "href": "reference/aggregate_num.html#parameters",
    "title": "aggregate_num",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nd\npd.DataFrame | pl.DataFrame\nDataFrame to aggregate data from.\nrequired\n\n\ncolumn\nstr\nName of the d column to aggregate.\nrequired\n\n\nfn\n(sum, mean, min, max, median)\nFunction used to aggregate the values, by default “sum”.\n\"sum\"\n\n\ntaxid_col\nstr\nName of the d column containing taxonomy ids, by default “taxid”\n'taxid'"
  },
  {
    "objectID": "reference/aggregate_num.html#returns",
    "href": "reference/aggregate_num.html#returns",
    "title": "aggregate_num",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\npl.DataFrame\nAggregated DataFrame."
  },
  {
    "objectID": "reference/aggregate_num.html#raises",
    "href": "reference/aggregate_num.html#raises",
    "title": "aggregate_num",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nValueError\nIf column is equal to “taxid”.\n\n\n\nValueError\nIf fn is not on the allowed values."
  },
  {
    "objectID": "reference/aggregate_num.html#see-also",
    "href": "reference/aggregate_num.html#see-also",
    "title": "aggregate_num",
    "section": "",
    "text": "aggregate_count : aggregation of the number of observations.\naggregate_freq : aggregation of the values counts of a categorical variable."
  },
  {
    "objectID": "reference/aggregate_num.html#examples",
    "href": "reference/aggregate_num.html#examples",
    "title": "aggregate_num",
    "section": "",
    "text": "&gt;&gt;&gt; from pylifemap import aggregate_num\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; d = pl.DataFrame({\n...     \"taxid\": [33154, 33090, 2],\n...     \"value\": [10, 5, 100]\n... })\n&gt;&gt;&gt; aggregate_num(d, column=\"value\", fn=\"sum\")\nshape: (5, 2)\n┌───────┬───────┐\n│ taxid ┆ value │\n│ ---   ┆ ---   │\n│ i32   ┆ i64   │\n╞═══════╪═══════╡\n│ 0     ┆ 115   │\n│ 2     ┆ 100   │\n│ 2759  ┆ 15    │\n│ 33090 ┆ 5     │\n│ 33154 ┆ 10    │\n└───────┴───────┘"
  },
  {
    "objectID": "development.html",
    "href": "development.html",
    "title": "Development notes",
    "section": "",
    "text": "To install pylifemap from git:\n# With pip\npip install git+https://github.com/Lifemap-ToL/pylifemap.git\n# Add to a project with uv\nuv add"
  },
  {
    "objectID": "development.html#install-from-git",
    "href": "development.html#install-from-git",
    "title": "Development notes",
    "section": "",
    "text": "To install pylifemap from git:\n# With pip\npip install git+https://github.com/Lifemap-ToL/pylifemap.git\n# Add to a project with uv\nuv add"
  },
  {
    "objectID": "development.html#install-fom-source",
    "href": "development.html#install-fom-source",
    "title": "Development notes",
    "section": "Install fom source",
    "text": "Install fom source\nIf you want to build pylifemap from source, you’ll have to follow these steps:\n\nInstall node.js\nInstall uv dependency management system\nClone the pylifemap repository\nInstall Python dependencies with : uv sync\nInstall JavaScript dependencies with : npm install --workspaces --include-root-workspace"
  },
  {
    "objectID": "development.html#widget-javascript-modification-and-bundling",
    "href": "development.html#widget-javascript-modification-and-bundling",
    "title": "Development notes",
    "section": "Widget JavaScript modification and bundling",
    "text": "Widget JavaScript modification and bundling\nEach time the widget JavaScript or CSS code is modified in the src/js/ or packages/lifemapjs/ directories, it must be bundled with one of the following commands in pylifemap:\n# Bundle\nnpm run bundle\n# Build (bundle + minify)\nnpm run build\n# Bundle and watch for code change\nnpm run dev\nThe result is put into src/pylifemap/static."
  },
  {
    "objectID": "development.html#tests",
    "href": "development.html#tests",
    "title": "Development notes",
    "section": "Tests",
    "text": "Tests\nPython tests are in the tests directory and can be run with:\njust test"
  },
  {
    "objectID": "development.html#documentation",
    "href": "development.html#documentation",
    "title": "Development notes",
    "section": "Documentation",
    "text": "Documentation\nThe package documentation is in doc/. It is managed by quarto and quartodoc.\nTo build it in HTML format in doc/_site/you can run:\njust doc"
  },
  {
    "objectID": "development.html#docker-image",
    "href": "development.html#docker-image",
    "title": "Development notes",
    "section": "Docker image",
    "text": "Docker image\nTo build the docker image manually, run the following at the root of the repisotory:\ndocker build . -t pylifemap"
  },
  {
    "objectID": "development.html#maintenance-notes",
    "href": "development.html#maintenance-notes",
    "title": "Development notes",
    "section": "Maintenance notes",
    "text": "Maintenance notes\n\nReleases\n\nChange version in NEWS.md and src/pylifemap/__about__.py\nRelease the Python package with uv build and uv publish in pylifemap\nTag the version in git\nCreate a release on Github\nBump to dev version in pyproject.toml and NEWS.md"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "As it provides a Jupyter widget, pylifemap is primarily designed to be used in a notebook environment such as Jupyter or VSCode.\nBut it is also possible to use it in a Python script or in the Python REPL. In this case you can use the save() method to export the widget to an HTML file that can be opened later. You can also use the show() method, in this case the widget is exported to a temporary file and opened in the user’s browser.\n\n\n\n\n\n\nNote\n\n\n\npylifemap visualizations can also be embedded in Quarto documents in HTML format."
  },
  {
    "objectID": "installation.html#notebook-run-script-run",
    "href": "installation.html#notebook-run-script-run",
    "title": "Installation",
    "section": "",
    "text": "As it provides a Jupyter widget, pylifemap is primarily designed to be used in a notebook environment such as Jupyter or VSCode.\nBut it is also possible to use it in a Python script or in the Python REPL. In this case you can use the save() method to export the widget to an HTML file that can be opened later. You can also use the show() method, in this case the widget is exported to a temporary file and opened in the user’s browser.\n\n\n\n\n\n\nNote\n\n\n\npylifemap visualizations can also be embedded in Quarto documents in HTML format."
  },
  {
    "objectID": "installation.html#install-locally",
    "href": "installation.html#install-locally",
    "title": "Installation",
    "section": "Install locally",
    "text": "Install locally\nFor the moment only the development version can be installed from Github.\nYou can add the package to a script or project with uv:\nuv add git+https://github.com/Lifemap-ToL/pylifemap.git\nYou can also install it (preferably in a virtual environment) with pip:\npip install git+https://github.com/Lifemap-ToL/pylifemap.git"
  },
  {
    "objectID": "installation.html#run-in-google-colab",
    "href": "installation.html#run-in-google-colab",
    "title": "Installation",
    "section": "Run in Google Colab",
    "text": "Run in Google Colab\nYou can try the package (without installing anything) in Google Colab.\nThe easiest way is by using our introduction notebook directly in Colab: ."
  },
  {
    "objectID": "installation.html#run-with-juv",
    "href": "installation.html#run-with-juv",
    "title": "Installation",
    "section": "Run with juv",
    "text": "Run with juv\njuv is a toolkit for reproducible Jupyter notebooks, powered by uv.\nYou can easily create and run a notebook with pylifemap with:\njuv init notebook.ipynb\njuv add notebook.ipynb git+https://github.com/Lifemap-ToL/pylifemap.git\njuv run notebook.ipynb"
  },
  {
    "objectID": "installation.html#run-with-docker",
    "href": "installation.html#run-with-docker",
    "title": "Installation",
    "section": "Run with Docker",
    "text": "Run with Docker\n\nRun in Jupyter\nAnother way to use the package without having to install it is to use our Docker image.\nTo use pylifemap in a Jupyter environment, you have to install Docker, open a terminal in the directory containing your data and notebook files, and run:\ndocker run -it -p 8899:8899 -v $PWD:/local/ ghcr.io/lifemap-tol/pylifemap:latest\nOpen the following URL in your browser: http://127.0.0.1:8899/lab, and you will have access to a Jupyter notebook environment with pylifemap and its dependencies preinstalled.\n\n\nRun a script\nIf you just want to run a Python script generating a pylifemap visualization, you can open a terminal in the script directory and run the following command:\ndocker run -v $PWD:/local/ ghcr.io/lifemap-tol/pylifemap:latest myscript.py\nIn this case, if you use show() in your script the result will not be opened in your browser but will instead be saved in a lifemap.html file in your working directory."
  }
]