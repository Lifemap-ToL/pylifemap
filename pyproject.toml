[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pylifemap"
dynamic = ["version"]
description = 'Python package for Lifemap visualizations.'
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
keywords = []
authors = [
  { name = "Julien Barnier", email = "julien.barnier@cnrs.fr" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "anywidget[dev]>=0.9.0",
  "polars>=0.20.6",
  "pandas",
  "pyarrow>=15.0.0",
  "ipywidgets>=8.1.0",
  "solara>=1",
  "shiny",
  "shinywidgets",
  "htmltools"
]

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

[project.urls]
Documentation = "https://github.com/juba/pylifemap#readme"
Issues = "https://github.com/juba/pylifemap/issues"
Source = "https://github.com/juba/pylifemap"

[tool.hatch.version]
path = "src/pylifemap/__about__.py"

[tool.hatch.envs.default]
features=["dev"]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "quartodoc"
]
[tool.hatch.envs.default.scripts]
get_lmdata = "Rscript scripts/01_get_lmdata.R && python scripts/02_prepare_lmdata.py"
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]
doc = "cd doc && quartodoc build && quarto render"

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.9.1", "mypy>=1.0.0", "ruff>=0.0.291"]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/pylifemap tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]


[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
ignore-vcs = true
include = [
  "src/pylifemap/*", "src/pylifemap/static/*", "src/pylifemap/data/*"
]
exclude = [".github", "doc", ".vscode", "examples"]

[tool.hatch.build.targets.wheel]
packages = ["src/pylifemap"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["src/pylifemap/static/widget.js", "src/pylifemap/static/widget.css"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "npm"
build_cmd = "bundle"


[tool.black]
target-version = ["py310"]
line-length = 88
skip-string-normalization = true

[tool.pytest.ini_options]
testpaths = "tests"
pythonpath = "src"
filterwarnings = "ignore::DeprecationWarning"


[tool.ruff]
exclude = ["__pycache__", "__pypackages__", ".git"]
target-version = "py310"
line-length = 88
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.isort]
known-first-party = ["pylifemap"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


[tool.coverage.run]
source_pkgs = ["pylifemap", "tests"]
branch = true
parallel = true
omit = [
  "src/pylifemap/__about__.py",
]

[tool.coverage.paths]
pylifemap = ["src/pylifemap", "*/pylifemap/src/pylifemap"]
tests = ["tests", "*/pylifemap/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
